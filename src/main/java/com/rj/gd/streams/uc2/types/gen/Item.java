/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.rj.gd.streams.uc2.types.gen;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Item extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3406358017827187612L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Item\",\"namespace\":\"com.rj.gd.streams.uc2.types.gen\",\"fields\":[{\"name\":\"Exchange\",\"type\":\"string\",\"doc\":\"NYSE,NASDAQ,APEX\"},{\"name\":\"Ticker\",\"type\":\"string\"},{\"name\":\"TotalSize\",\"type\":\"int\"},{\"name\":\"AvgPrice\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Item> ENCODER =
      new BinaryMessageEncoder<Item>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Item> DECODER =
      new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Item> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Item> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Item> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Item to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Item from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Item instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Item fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** NYSE,NASDAQ,APEX */
   private java.lang.CharSequence Exchange;
   private java.lang.CharSequence Ticker;
   private int TotalSize;
   private float AvgPrice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Item() {}

  /**
   * All-args constructor.
   * @param Exchange NYSE,NASDAQ,APEX
   * @param Ticker The new value for Ticker
   * @param TotalSize The new value for TotalSize
   * @param AvgPrice The new value for AvgPrice
   */
  public Item(java.lang.CharSequence Exchange, java.lang.CharSequence Ticker, java.lang.Integer TotalSize, java.lang.Float AvgPrice) {
    this.Exchange = Exchange;
    this.Ticker = Ticker;
    this.TotalSize = TotalSize;
    this.AvgPrice = AvgPrice;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Exchange;
    case 1: return Ticker;
    case 2: return TotalSize;
    case 3: return AvgPrice;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Exchange = (java.lang.CharSequence)value$; break;
    case 1: Ticker = (java.lang.CharSequence)value$; break;
    case 2: TotalSize = (java.lang.Integer)value$; break;
    case 3: AvgPrice = (java.lang.Float)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Exchange' field.
   * @return NYSE,NASDAQ,APEX
   */
  public java.lang.CharSequence getExchange() {
    return Exchange;
  }


  /**
   * Sets the value of the 'Exchange' field.
   * NYSE,NASDAQ,APEX
   * @param value the value to set.
   */
  public void setExchange(java.lang.CharSequence value) {
    this.Exchange = value;
  }

  /**
   * Gets the value of the 'Ticker' field.
   * @return The value of the 'Ticker' field.
   */
  public java.lang.CharSequence getTicker() {
    return Ticker;
  }


  /**
   * Sets the value of the 'Ticker' field.
   * @param value the value to set.
   */
  public void setTicker(java.lang.CharSequence value) {
    this.Ticker = value;
  }

  /**
   * Gets the value of the 'TotalSize' field.
   * @return The value of the 'TotalSize' field.
   */
  public int getTotalSize() {
    return TotalSize;
  }


  /**
   * Sets the value of the 'TotalSize' field.
   * @param value the value to set.
   */
  public void setTotalSize(int value) {
    this.TotalSize = value;
  }

  /**
   * Gets the value of the 'AvgPrice' field.
   * @return The value of the 'AvgPrice' field.
   */
  public float getAvgPrice() {
    return AvgPrice;
  }


  /**
   * Sets the value of the 'AvgPrice' field.
   * @param value the value to set.
   */
  public void setAvgPrice(float value) {
    this.AvgPrice = value;
  }

  /**
   * Creates a new Item RecordBuilder.
   * @return A new Item RecordBuilder
   */
  public static com.rj.gd.streams.uc2.types.gen.Item.Builder newBuilder() {
    return new com.rj.gd.streams.uc2.types.gen.Item.Builder();
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Item RecordBuilder
   */
  public static com.rj.gd.streams.uc2.types.gen.Item.Builder newBuilder(com.rj.gd.streams.uc2.types.gen.Item.Builder other) {
    if (other == null) {
      return new com.rj.gd.streams.uc2.types.gen.Item.Builder();
    } else {
      return new com.rj.gd.streams.uc2.types.gen.Item.Builder(other);
    }
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Item instance.
   * @param other The existing instance to copy.
   * @return A new Item RecordBuilder
   */
  public static com.rj.gd.streams.uc2.types.gen.Item.Builder newBuilder(com.rj.gd.streams.uc2.types.gen.Item other) {
    if (other == null) {
      return new com.rj.gd.streams.uc2.types.gen.Item.Builder();
    } else {
      return new com.rj.gd.streams.uc2.types.gen.Item.Builder(other);
    }
  }

  /**
   * RecordBuilder for Item instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Item>
    implements org.apache.avro.data.RecordBuilder<Item> {

    /** NYSE,NASDAQ,APEX */
    private java.lang.CharSequence Exchange;
    private java.lang.CharSequence Ticker;
    private int TotalSize;
    private float AvgPrice;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.rj.gd.streams.uc2.types.gen.Item.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Exchange)) {
        this.Exchange = data().deepCopy(fields()[0].schema(), other.Exchange);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Ticker)) {
        this.Ticker = data().deepCopy(fields()[1].schema(), other.Ticker);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.TotalSize)) {
        this.TotalSize = data().deepCopy(fields()[2].schema(), other.TotalSize);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.AvgPrice)) {
        this.AvgPrice = data().deepCopy(fields()[3].schema(), other.AvgPrice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Item instance
     * @param other The existing instance to copy.
     */
    private Builder(com.rj.gd.streams.uc2.types.gen.Item other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.Exchange)) {
        this.Exchange = data().deepCopy(fields()[0].schema(), other.Exchange);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Ticker)) {
        this.Ticker = data().deepCopy(fields()[1].schema(), other.Ticker);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TotalSize)) {
        this.TotalSize = data().deepCopy(fields()[2].schema(), other.TotalSize);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.AvgPrice)) {
        this.AvgPrice = data().deepCopy(fields()[3].schema(), other.AvgPrice);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'Exchange' field.
      * NYSE,NASDAQ,APEX
      * @return The value.
      */
    public java.lang.CharSequence getExchange() {
      return Exchange;
    }


    /**
      * Sets the value of the 'Exchange' field.
      * NYSE,NASDAQ,APEX
      * @param value The value of 'Exchange'.
      * @return This builder.
      */
    public com.rj.gd.streams.uc2.types.gen.Item.Builder setExchange(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Exchange = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Exchange' field has been set.
      * NYSE,NASDAQ,APEX
      * @return True if the 'Exchange' field has been set, false otherwise.
      */
    public boolean hasExchange() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Exchange' field.
      * NYSE,NASDAQ,APEX
      * @return This builder.
      */
    public com.rj.gd.streams.uc2.types.gen.Item.Builder clearExchange() {
      Exchange = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Ticker' field.
      * @return The value.
      */
    public java.lang.CharSequence getTicker() {
      return Ticker;
    }


    /**
      * Sets the value of the 'Ticker' field.
      * @param value The value of 'Ticker'.
      * @return This builder.
      */
    public com.rj.gd.streams.uc2.types.gen.Item.Builder setTicker(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Ticker = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Ticker' field has been set.
      * @return True if the 'Ticker' field has been set, false otherwise.
      */
    public boolean hasTicker() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Ticker' field.
      * @return This builder.
      */
    public com.rj.gd.streams.uc2.types.gen.Item.Builder clearTicker() {
      Ticker = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'TotalSize' field.
      * @return The value.
      */
    public int getTotalSize() {
      return TotalSize;
    }


    /**
      * Sets the value of the 'TotalSize' field.
      * @param value The value of 'TotalSize'.
      * @return This builder.
      */
    public com.rj.gd.streams.uc2.types.gen.Item.Builder setTotalSize(int value) {
      validate(fields()[2], value);
      this.TotalSize = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'TotalSize' field has been set.
      * @return True if the 'TotalSize' field has been set, false otherwise.
      */
    public boolean hasTotalSize() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'TotalSize' field.
      * @return This builder.
      */
    public com.rj.gd.streams.uc2.types.gen.Item.Builder clearTotalSize() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'AvgPrice' field.
      * @return The value.
      */
    public float getAvgPrice() {
      return AvgPrice;
    }


    /**
      * Sets the value of the 'AvgPrice' field.
      * @param value The value of 'AvgPrice'.
      * @return This builder.
      */
    public com.rj.gd.streams.uc2.types.gen.Item.Builder setAvgPrice(float value) {
      validate(fields()[3], value);
      this.AvgPrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'AvgPrice' field has been set.
      * @return True if the 'AvgPrice' field has been set, false otherwise.
      */
    public boolean hasAvgPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'AvgPrice' field.
      * @return This builder.
      */
    public com.rj.gd.streams.uc2.types.gen.Item.Builder clearAvgPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Item build() {
      try {
        Item record = new Item();
        record.Exchange = fieldSetFlags()[0] ? this.Exchange : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Ticker = fieldSetFlags()[1] ? this.Ticker : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.TotalSize = fieldSetFlags()[2] ? this.TotalSize : (java.lang.Integer) defaultValue(fields()[2]);
        record.AvgPrice = fieldSetFlags()[3] ? this.AvgPrice : (java.lang.Float) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Item>
    WRITER$ = (org.apache.avro.io.DatumWriter<Item>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Item>
    READER$ = (org.apache.avro.io.DatumReader<Item>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.Exchange);

    out.writeString(this.Ticker);

    out.writeInt(this.TotalSize);

    out.writeFloat(this.AvgPrice);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.Exchange = in.readString(this.Exchange instanceof Utf8 ? (Utf8)this.Exchange : null);

      this.Ticker = in.readString(this.Ticker instanceof Utf8 ? (Utf8)this.Ticker : null);

      this.TotalSize = in.readInt();

      this.AvgPrice = in.readFloat();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.Exchange = in.readString(this.Exchange instanceof Utf8 ? (Utf8)this.Exchange : null);
          break;

        case 1:
          this.Ticker = in.readString(this.Ticker instanceof Utf8 ? (Utf8)this.Ticker : null);
          break;

        case 2:
          this.TotalSize = in.readInt();
          break;

        case 3:
          this.AvgPrice = in.readFloat();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










